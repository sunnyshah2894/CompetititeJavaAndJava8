
1. Given two integer arrays, find the intersection of the two. 

1,2,3      1    --- > 1
1,1, 2    1,1  ---> 1, 1 

1,2   3 



List<Integer> findIntersection( int A[] ,int B[] ){

Map<Integer, Integer> mapA = new HashMap<>();
Map<Integer, Integer> mapB = new HashMap<>();
//Map<Integer, Integer> result = new HashMap<>();
for( int i : A ){
    mapA.put( i, mapA.getOrDefault(i,0)+1 );
}
// MapA 
// 1 -> 1
// 2 -> 1

for( int i : B ){
    
    int freqA = mapA.getOrDefault(i,0); // 0
    int freqB = mapB.getOrDefault(i,0) + 1; // 1
        //result.put( i, Math.min(freqB,freqA) ); // 3 -> 0
        mapB.put( i, freqB ); // 3 -> 1 

} 

List<Integer> resultList = new ArrayList<>();

for( int key : mapB.keySet() ){

int times =  Math.min(mapA.getOrDefault(key,0),mapB.get(key)); //result.get(key);     // 0
while( times-->0 ){
    resultList.add(key);
}  
}     
return resultList;

}



2.  Given two strings, return boolean True/False, if they are only one edit apart.Edit can be insert/delete/update of only one character in the string. Eg:
-True
xyz,xz
xyz, xyk
xy, xyz

-False
xyz, xyz
xyz,xzy
x, xyz

“x” “” → true
null,”” -> false
null,null -> false;
“xyz”,”yxz” -> false;
“xy”,”xyz” -> true
“ub12b41”, “ub12b41” -> true


boolean isStringOneDistanceApart( String A, String B ){
    
    if( A == null || B == null ) 
return false;
    if( Math.abs( A.length() - B.length() ) > 1 )
        return false;

    if( Math.abs( A.length() - B.length() ) == 1 ){
    
for( int i=0 ; i< Math.min( A.length(),B.length() ) ; i++ ){
    if( A.charAt(i) != B.charAt(i) )
        return false;
}    
        return true;
}
else{

    int countOfNotMatching = 0;
    for( int i=0 ; i< Math.min( A.length(),B.length() ) ; i++ ){
    if( A.charAt(i) != B.charAt(i) )
        countOfNotMatching++;
}
return (countOfNotMatching <= 1);

}

}
3. There is a street with houses in a row. You are given colors and a cost associated with each color.
Paint the houses on the street with minimal cost such that no two adjacent houses have the same color. You have to use all the colors atleast once.


H1, H2, H3, H4, H5 , H6, h7
10, 20, 10, 40, ..

R, 10
G, 20
B, 30

[H1...H2][R G B]
[H1][R]=10*10
[H1][G]=20*10
[H1][B] = 30*10

H -> i = 0-n
C -> j = 0-m
[i][j] = area(Hi)*cost(j) + Min([i-1][k], where, k!=j)

[h3][B] = area(H3)*cost(B) + min( [h2][R], [h2][G] )

answer = min( [h3][R], [h3][G] , [h3][B] )

class house{
    long area;
    Color color;
}

class Color{
    final static int RED = 1;
    //...G,B
}

class problem{
    
    List<house> houses = new ArrayList<>();

}

interface problemContraints{

}
class minimizeCost implements problemContraints{
    
}
class minimizeCostPerArea implements problemContraints{
    
}


class utility{
    public static void solve(problem, problemSolver)
}

utility.solve( problem, new minimizeCostPerArea() )

